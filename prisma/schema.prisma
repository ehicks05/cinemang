generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id            Int      @id
  cast          String
  certification String?
  director      String
  genreId       Int      @map("genre_id")
  imdbId        String?  @map("imdb_id")
  languageId    String   @map("language_id")
  overview      String
  popularity    Float
  posterPath    String   @map("poster_path")
  releasedAt    DateTime @map("released_at") @db.Date
  runtime       Int
  title         String
  voteAverage   Float    @map("vote_average")
  voteCount     Int      @map("vote_count")

  castCredits    CastCredit[]
  crewCredits    CrewCredit[]
  watchProviders MovieWatchProvider[]

  @@index([title])
  @@index([languageId])
  @@index([releasedAt])
  @@index([voteAverage])
  @@index([voteCount])
  @@map("movie")
}

model Person {
  id                 Int          @id
  imdbId             String?      @map("imdb_id")
  biography          String
  birthday           DateTime?    @db.Date
  deathday           DateTime?    @db.Date
  gender             Int
  knownForDepartment String       @map("known_for_department")
  name               String
  placeOfBirth       String?      @map("place_of_birth")
  popularity         Float
  profilePath        String?      @map("profile_path")
  castCredits        CastCredit[]
  crewCredits        CrewCredit[]

  @@index([name])
  @@map("person")
}

model CastCredit {
  creditId String @id @map("credit_id")

  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId  Int
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId Int

  castId    Int     @map("cast_id")
  character String?
  order     Int

  @@index([movieId])
  @@index([personId])
  @@map("cast_credit")
}

model CrewCredit {
  creditId String @id @map("credit_id")

  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId  Int
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId Int

  department String
  job        String

  @@index([movieId])
  @@index([personId])
  @@map("crew_credit")
}

model Genre {
  id   Int    @id
  name String

  @@map("genre")
}

model Language {
  id    String @id
  name  String
  count Int    @default(0)

  @@map("language")
}

model WatchProvider {
  id              Int                  @id
  displayPriority Int                  @map("display_priority")
  name            String
  logoPath        String               @map("logo_path")
  count           Int                  @default(0)
  movies          MovieWatchProvider[]

  @@map("watch_provider")
}

model MovieWatchProvider {
  movie           Movie         @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId         Int
  watchProvider   WatchProvider @relation(fields: [watchProviderId], references: [id], onDelete: Cascade)
  watchProviderId Int

  @@id([movieId, watchProviderId])
  @@map("movie_watch_provider")
}

model MovieApiResponse {
  id        Int      @id
  data      Json
  updatedAt DateTime @updatedAt @db.Date

  @@map("movie_api_response")
}

model PersonApiResponse {
  id        Int      @id
  data      Json
  updatedAt DateTime @updatedAt @db.Date

  @@map("person_api_response")
}

model MovieMinimalApiResponse {
  id         Int      @id
  popularity Float
  voteCount  Int      @map("vote_count")
  updatedAt  DateTime @updatedAt

  @@map("movie_minimal_api_response")
}
