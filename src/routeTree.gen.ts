/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TvIndexRouteImport } from './routes/tv.index'
import { Route as FilmsIndexRouteImport } from './routes/films.index'
import { Route as TvShowIdRouteImport } from './routes/tv.$showId'
import { Route as PeoplePersonIdRouteImport } from './routes/people.$personId'
import { Route as FilmsFilmIdRouteImport } from './routes/films.$filmId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TvIndexRoute = TvIndexRouteImport.update({
  id: '/tv/',
  path: '/tv/',
  getParentRoute: () => rootRouteImport,
} as any)
const FilmsIndexRoute = FilmsIndexRouteImport.update({
  id: '/films/',
  path: '/films/',
  getParentRoute: () => rootRouteImport,
} as any)
const TvShowIdRoute = TvShowIdRouteImport.update({
  id: '/tv/$showId',
  path: '/tv/$showId',
  getParentRoute: () => rootRouteImport,
} as any)
const PeoplePersonIdRoute = PeoplePersonIdRouteImport.update({
  id: '/people/$personId',
  path: '/people/$personId',
  getParentRoute: () => rootRouteImport,
} as any)
const FilmsFilmIdRoute = FilmsFilmIdRouteImport.update({
  id: '/films/$filmId',
  path: '/films/$filmId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/films/$filmId': typeof FilmsFilmIdRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/tv/$showId': typeof TvShowIdRoute
  '/films': typeof FilmsIndexRoute
  '/tv': typeof TvIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/films/$filmId': typeof FilmsFilmIdRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/tv/$showId': typeof TvShowIdRoute
  '/films': typeof FilmsIndexRoute
  '/tv': typeof TvIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/films/$filmId': typeof FilmsFilmIdRoute
  '/people/$personId': typeof PeoplePersonIdRoute
  '/tv/$showId': typeof TvShowIdRoute
  '/films/': typeof FilmsIndexRoute
  '/tv/': typeof TvIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/films/$filmId'
    | '/people/$personId'
    | '/tv/$showId'
    | '/films'
    | '/tv'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/films/$filmId'
    | '/people/$personId'
    | '/tv/$showId'
    | '/films'
    | '/tv'
  id:
    | '__root__'
    | '/'
    | '/films/$filmId'
    | '/people/$personId'
    | '/tv/$showId'
    | '/films/'
    | '/tv/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FilmsFilmIdRoute: typeof FilmsFilmIdRoute
  PeoplePersonIdRoute: typeof PeoplePersonIdRoute
  TvShowIdRoute: typeof TvShowIdRoute
  FilmsIndexRoute: typeof FilmsIndexRoute
  TvIndexRoute: typeof TvIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tv/': {
      id: '/tv/'
      path: '/tv'
      fullPath: '/tv'
      preLoaderRoute: typeof TvIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/films/': {
      id: '/films/'
      path: '/films'
      fullPath: '/films'
      preLoaderRoute: typeof FilmsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tv/$showId': {
      id: '/tv/$showId'
      path: '/tv/$showId'
      fullPath: '/tv/$showId'
      preLoaderRoute: typeof TvShowIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/people/$personId': {
      id: '/people/$personId'
      path: '/people/$personId'
      fullPath: '/people/$personId'
      preLoaderRoute: typeof PeoplePersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/films/$filmId': {
      id: '/films/$filmId'
      path: '/films/$filmId'
      fullPath: '/films/$filmId'
      preLoaderRoute: typeof FilmsFilmIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FilmsFilmIdRoute: FilmsFilmIdRoute,
  PeoplePersonIdRoute: PeoplePersonIdRoute,
  TvShowIdRoute: TvShowIdRoute,
  FilmsIndexRoute: FilmsIndexRoute,
  TvIndexRoute: TvIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
